#!/usr/bin/env php
<?php

/**
 * COMMA: COMmand-line MAnager
 * Bootstrap script for Temma command-line execution manager.
 *
 * Usage: bin/comma controller [action [--name1=param1] [--name2=param2]...]
 */

$objectName = null;
$methodName = null;
$params = [];

/* *** Add inclusion path. *** */
set_include_path(__DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'lib' . PATH_SEPARATOR . get_include_path());

/* *** Load libraries. *** */
require_once('Temma/Base/Autoload.php');
require_once('Temma/Base/Log.php');

/* *** Log configuration. *** */
use \Temma\Base\Log as TµLog;
TµLog::logToStdErr();

/* *** Autloaders. *** */
// Temma autoloader
\Temma\Base\Autoload::autoload(__DIR__ . '/../cli');
// Composer autoloader
@include_once(__DIR__ . '/../vendor/autoload.php');

use \Temma\Utils\Ansi as TµAnsi;

/* *** Options management. *** */
$forcedJsonConfigPath = null;
if ($_SERVER['argc'] < 2) {
	showHelp(true);
	exit(1);
}
array_shift($_SERVER['argv']);
// help management
if ($_SERVER['argv'][0] == 'help') {
	showHelp();
	exit(0);
}
// stderr management
if ($_SERVER['argv'][0] == 'nostderr') {
	TµLog::logToStdErr(false);
	array_shift($_SERVER['argv']);
}
// extract object, method and parameters
$objectName = array_shift($_SERVER['argv']);
$methodName = array_shift($_SERVER['argv']);
if (str_starts_with($methodName, 'conf=')) {
	// get path to the 'temma.json' file
	$forcedJsonConfigPath = mb_substr($methodName, mb_strlen('conf='));
	$methodName = null;
} else if (str_starts_with($methodName, '--')) {
	fprintf(STDERR, "No parameter allowed for the root action.\n");
	exit(1);
}
foreach ($_SERVER['argv'] as $param) {
	if (str_starts_with($param, 'conf=')) {
		// get path to the 'temma.json' file
		$forcedJsonConfigPath = mb_substr($param, mb_strlen('conf='));
		continue;
	}
	// check parameters
	if (!preg_match('/^--([^=]+)=(.*)$/', $param, $matches)) {
		fprintf(STDERR, "Bad parameter '$param'\n");
		exit(2);
	}
	$params[$matches[1]] = $matches[2];
}

/* *** Read configuration file. *** */
$config = new \Temma\Web\Config(__DIR__ . '/..');
$config->readConfigurationFile($forcedJsonConfigPath);

/* *** Manage log thresholds. *** */
$logLevels = $config->logLevels;
$usedLogLevels = TµLog::checkLogLevel($logLevels);
if (!$usedLogLevels && is_array($logLevels)) {
	$usedLogLevels = []; 
	foreach ($logLevels as $class => $level) {
		if (($level = TµLog::checkLogLevel($level)))
			$usedLogLevels[$class] = $level;
	}
}
if (!$usedLogLevels)
	$usedLogLevels = \Temma\Web\Config::LOG_LEVEL;
TµLog::setThreshold($usedLogLevels);

/* *** Create Loader object (dependency injection container). *** */
// create request
$request = new \Temma\Web\Request(false);
$request->setParams($params);
// create response
$response = new \Temma\Web\Response();
$response['CONTROLLER'] = $objectName;
$response['ACTION'] = $methodName;
$response['conf'] = $config->autoimport;
// create the loader
$loaderName = $config->loader;
$loader = new $loaderName([
	'config'   => $config,
	'request'  => $request,
	'response' => $response,
]);

/* *** Connect to data sources. *** */
$dataSources = [];
foreach ($config->dataSources as $name => $dsn) {
	$dataSources[$name] = \Temma\Base\Datasource::factory($dsn);
}
$loader->set('dataSources', $dataSources);

/* *** Check controller object. *** */
if (!class_exists($objectName)) {
	fprintf(STDERR, "Object '$objectName' doesn't exists.\n");
	exit(3);
}
if (!is_subclass_of($objectName, '\Temma\Web\Controller')) {
	fprintf(STDERR, "Object '$objectName' doesn't extend the \Temma\Web\Controller object.\n");
	exit(3);
}

/* *** Command execution. *** */
// check root action
$methodName = $methodName ?: \Temma\Web\Framework::CONTROLLERS_ROOT_ACTION;
// execution
$executorController = new \Temma\Web\Controller($loader);
try {
	$status = $executorController->_subProcess($objectName, $methodName);
	exit((int)$status);
} catch (\Exception $e) {
	// display errors
	$message = $e->getMessage() ?: 'Error';
	print("\n");
	print(TµAnsi::block('alert', $message));
	// if the loglevel is DEBUG, shows the stacktrace
	if (($usedLogLevels['Temma/Cli'] ?? null) == TµLog::DEBUG)
		throw $e;
	exit(1);
}

/* ********** FUNCTIONS ********** */
/**
 * Function called when the first parameter on the command line is 'help'.
 * It extracts the name of the controller (and the action if given) and shows
 * the related information.
 * @param	bool	$showUsage	(optional) True to force usage display.
 */
function showHelp(bool $showUsage=false) {
	array_shift($_SERVER['argv']);
	if (!$_SERVER['argv'] || $showUsage) {
		$s = "<h1 padding='2'>COMMA USAGE</h1>
<h2 line=''>Common usage</h2>
    <b>bin/comma</b> <color t='blue'>controller</color> <faint>[</faint><color t='green'>action</color> <faint>[</faint>--<color t='yellow'>param1</color>=<color t='cyan'>value1</color><faint>] [</faint>--<color t='yellow'>param2</color>=<color t='cyan'>value2</color><faint>]</faint>...<faint>]</faint><br />
        <faint>If no action is given, the <span textColor='green'>__invoke()</span> method is executed.</faint><br />
        <faint>If the controller has a <span textColor='green'>__proxy()</span> method, it is executed systematically.</faint><br />
        <faint>If the requested action doesn't exist, but the controller has a <span textColor='green'>__call()</span> method, this method is executed.</faint><br />


<h2 line='' marginTop='2'>Help</h2>
    <b>bin/comma</b><br />
    <b>bin/comma</b> <u>help</u><br />
        <faint>Shows this help.</faint><br /><br />

    <b>bin/comma</b> <u>help</u> <color t='blue'>controller</color><br />
        <faint>Shows the list of actions offered by the requested controller.</faint><br /><br />

    <b>bin.comma</b> <u>help</u> <color t='blue'>controller</color> <color t='red'>action</color><br />
        <faint>Shows the documentation of the requested action.</faint><br />";
		fprintf(STDERR, TµAnsi::style($s));
		exit(0);
	}
	$objectName = array_shift($_SERVER['argv']);
	if (!class_exists($objectName)) {
		print(TµAnsi::color('red', "There is no avaiable controller named '$objectName'.\n"));
		exit(1);
	}
	// get controller info
	$reflect = new ReflectionClass($objectName);
	print(TµAnsi::title1('COMMA HELP'));
	print(TµAnsi::title3("Controller: $objectName"));
	$notMethods = get_class_methods('\Temma\Web\Controller');
	$methods = $reflect->getMethods(ReflectionMethod::IS_PUBLIC);
	$realMethods = [];
	foreach ($methods as $method) {
		if (in_array($method->name, $notMethods))
			continue;
		$realMethod = [
			'name'    => $method->getName(),
			'params'  => [],
			'comment' => $method->getDocComment(),
		];
		foreach ($method->getParameters() as $param) {
			$realMethod['params'][] = '--' . TµAnsi::color('green', $param->getName()) . TµAnsi::faint('=') . TµAnsi::color('blue', (string)$param->getType());
		}
		$realMethods[] = $realMethod;
	}
	// shows object info
	TµAnsi::setStyle('h4', bold: true, textColor: 'black');
	foreach ($realMethods as $method) {
		if ($_SERVER['argv'] && $method['name'] != $_SERVER['argv'][0])
			continue;
		print(TµAnsi::title4('Action: ' . $method['name']));
		print(' ' . TµAnsi::bold($method['name']) . ' ' . implode(' ', $method['params']) . "\n");
		if ($method['comment']) {
			$comment = preg_replace('/^\/[\*\s]*/', '', $method['comment']);
			$comment = preg_replace('/\n[\*\s]*/', "\n  ", $comment);
			$comment = preg_replace('/[\s\*\/]*$/', '', $comment);
			print(TµAnsi::faint(preg_replace('/\n\s*/', "\n  ", ' ' . $comment)) . "\n");
		}
		print("\n");
	}
}
