#!/usr/bin/env php
<?php

/**
 * COMMA: COMmand-line MAnager
 * Bootstrap script for Temma command-line execution manager.
 *
 * Usage: bin/comma object [method [--name1=param1] [--name2=param2]...]
 */

$objectName = null;
$methodName = null;
$params = [];

/* *** Options management. *** */
if ($_SERVER['argc'] < 2) {
	fprintf(STDERR, "Usage: bin/comma object [method [--name1=param1] [--name2=param2]...]\n");
	exit(1);
}
array_shift($_SERVER['argv']);
$objectName = array_shift($_SERVER['argv']);
$methodName = array_shift($_SERVER['argv']);
if (str_starts_with($methodName, '--')) {
	fprintf(STDERR, "No parameter allowed for the root action.\n");
	exit(1);
}
foreach ($_SERVER['argv'] as $param) {
	if (!preg_match('/^--([^=]+)=(.*)$/', $param, $matches)) {
		fprintf(STDERR, "Bad parameter '$param'\n");
		exit(2);
	}
	$params[$matches[1]] = $matches[2];
}

/* *** Add inclusion path. *** */
set_include_path(__DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'lib' . PATH_SEPARATOR . get_include_path());

/* *** Load libraries. *** */
require_once('Temma/Base/Autoload.php');
require_once('Temma/Base/Log.php');

/* *** Log configuration. *** */
use \Temma\Base\Log as TµLog;
TµLog::logToStdErr();

/* *** Autloaders. *** */
// Temma autoloader
\Temma\Base\Autoload::autoload(__DIR__ . '/../cli');
// Composer autoloader
@include_once(__DIR__ . '/../vendor/autoload.php');

/* *** Read configuration file. *** */
$config = new \Temma\Web\Config(__DIR__ . '/..');
$config->readConfigurationFile();

/* *** Manage log thresholds. *** */
$logLevels = $config->logLevels;
$usedLogLevels = TµLog::checkLogLevel($logLevels);
if (!$usedLogLevels && is_array($logLevels)) {
	$usedLogLevels = []; 
	foreach ($logLevels as $class => $level) {
		if (($level = TµLog::checkLogLevel($level)))
			$usedLogLevels[$class] = $level;
	}
}
if (!$usedLogLevels)
	$usedLogLevels = \Temma\Web\Config::LOG_LEVEL;
TµLog::setThreshold($usedLogLevels);

/* *** Create Loader object ((dependency injection container). *** */
// create request
$request = new \Temma\Web\Request(false);
$request->setParams($params);
// create response
$response = new \Temma\Web\Response();
$response['CONTROLLER'] = $objectName;
$response['ACTION'] = $methodName;
// create the loader
$loaderName = $config->loader;
$loader = new $loaderName([
	'config'   => $config,
	'request'  => $request,
	'response' => $response,
]);

/* *** Connect to data sources. *** */
$datasources = [];
foreach ($config->dataSources as $name => $dsn) {
	$dataSources[$name] = \Temma\Base\Datasource::factory($dsn);
}
$loader->set('dataSources', $dataSources);

/* *** Check controller object. *** */
if (!class_exists($objectName)) {
	fprintf(STDERR, "Object '$objectName' doesn't exists.\n");
	exit(3);
}
if (!is_subclass_of($objectName, '\Temma\Web\Controller')) {
	fprintf(STDERR, "Object '$objectName' doesn't extend the \Temma\Web\Controller object.\n");
	exit(3);
}

/* *** Command execution. *** */
// check root action
$methodName = $methodName ?: \Temma\Web\Framework::CONTROLLERS_ROOT_ACTION;
// execution
$executorController = new \Temma\Web\Controller($loader);
$status = $executorController->_subProcess($objectName, $methodName);
exit((int)$status);

